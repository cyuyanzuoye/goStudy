1 go 语言的Io 提供了基础的操作--只要实现了期IO基本上--都会统一; 基本上使用 类型转换的方式，
y , ok := x.(int) 大概意思--将x转为int
2 IO文件的--开始位置Start ,当前位置Current ,结束位置 END
3 封装了操作接口(包裹的方式实现)-> Read ,Writer ,Close ,Seeker(offset,postion)
  3.1 神奇的GO,只要实现了对应的接口的方法，就算继承了接口，
  3.2 这样-从单个接口衍生了 读写，读写关闭，读写定位关闭等子接口
4 针对基础数据流对象-封装了ReadFrom,WriteTo,ReadAt，操作流对象的方法，
5 特殊ByteReader ,ByteScanner ,ByteWrite ,但字节操作对象
6 RuneReader ，RuneScanner的运行时操作对象；
7 字符操作类的---stringWriter(w Writer)  ,判断是否实现stringWriter ,否则默认接口函数
9 默认实现的读操作 ReadAtLeast-->ReadFull ,读取操作；拷贝操作 CopyBuffer-->Copy-->CopyN
10 实例---注意边界处理
   实例1-----特殊的 LimitReader 最小读取
   实例2-----特殊的SectionReader

















2--IO-PIPE管道
1 共享的PIPE结构--包括 WritePIPE ,ReadPIPE
主要的结构 （1）3个信号量 【读，写，数据操作信号量】，（2）数据区域【数据保护区】，（3）读，写-信号通知；（4）错误信息

2 实现读取操作
  2.1 读信号锁 ，数据操作信号锁
  2.2 等待读信号操作通知 （等待写操作-写完）
  2.3 读数据-- 检查是否读完-数据取重置为nil
  2.4 读完---- 通知写操作，已读完；

3 实现写操作
  3.1 写信号锁， 数据操作信号锁
  3.2 无错误，则写入数据，
  3.3 通知读操作--通知已写完
  3.4 等待写草操作通信--（等待-读操作--读完）
  3.5 计算传递给写读操作长度，

4 实现写关闭，读关闭
  4.1 设置操作锁
  4.2 设置关闭标识
  4.3 读写信号-通知

5 将共享的管道操作--拆分为---  读管道，写管道；
  这样对于同一个管道变量操作的时候，只有一份操作完，其他方才能操作；



























//异步通信
1 Cond 通知条件结构---操作notifyList 通知对象集，lock锁，拷贝lock(?)，noCopy指针对象（检查拷贝）
  1.1 常见操作 wait  [notifyList,添加到系统调度，锁，等待系统调度，解锁]
               Signal ，Broadcast 【检查cond是否被拷贝，无则通知系统解锁wait操作】


2 信号量Mutex实现Locker功能
  以前接触---信号量，根据变量值来控制.......
  lock









